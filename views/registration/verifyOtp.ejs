
<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>TICKER</title>
  <link rel="stylesheet" href="/registration/style.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
            background: linear-gradient(to right, #ffffff, #000000);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
    .container {
      animation: fadeIn 1.5s ease;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(40px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .form-control:focus {
      box-shadow: none;
      border-color: #007bff;
    }

    .form-control.valid {
      border: 2px solid #28a745;
    }

    .form-control.invalid {
      border: 2px solid #dc3545;
    }

    .timer small,
    .timer .time {
      color: #555;
    }

    .btn-dark {
      transition: background-color 0.3s ease;
    }

    .btn-dark:hover {
      background-color: #333;
    }
  </style>
</head>

<body>
  <div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="col-md-6 row rounded-4 bg-white shadow p-4">
      <div class="container mt-3">
        <div class="row">
          <div class="col-12">
            <div class="header-text text-center">
              <p class="fs-2 fw-bold">Verify OTP</p>
            </div>
            <form id="otpForm" novalidate>
              <div class="mb-3">
                <input type="text" name="otp" id="otp" class="form-control bg-light fs-6" placeholder="Enter OTP"
                  required pattern="\d{6}" title="Please enter 6 digits" maxlength="6" minlength="6">
                <div class="invalid-feedback">Please enter a 6-digit OTP.</div>
              </div>
              <div class="text-center fw-semibold mb-2 mt-3 timer">
                <small>Didn't receive the OTP?</small>
                <button class="btn btn-link fw-semibold p-0" id="resend" type="button">Resend</button>
                <span class="time fw-bold"></span>
              </div>
              <div class="input-group mb-3">
                <button type="submit" class="btn btn-lg border btn-dark w-100 fs-6"><span
                    class="fw-semibold">SUBMIT</span></button>
              </div>
              <div class="text-center mt-3">
                <span class="fs-6">Back to <a class="fw-bold text-decoration-none" href="/login">Login</a></span>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Timer logic
    let timerDuration = 120;
    let timerInterval;

    function startTimer(remainingTime) {
      const timerDisplay = document.querySelector('.timer .time');
      const resendBtn = document.getElementById('resend');

      timerInterval = setInterval(() => {
        if (remainingTime > 0) {
          timerDisplay.textContent = `${remainingTime}s`;
          resendBtn.disabled = true;
          remainingTime--;
          localStorage.setItem('otp_timer_remaining', remainingTime);
          localStorage.setItem('otp_timer_start_time', Date.now());
        } else {
          clearInterval(timerInterval);
          timerDisplay.textContent = '';
          resendBtn.disabled = false;
          localStorage.removeItem('otp_timer_remaining');
          localStorage.removeItem('otp_timer_start_time');
        }
      }, 1000);
    }

    window.addEventListener('DOMContentLoaded', () => {
      const storedRemainingRaw = localStorage.getItem('otp_timer_remaining');
      const storedStartTimeRaw = localStorage.getItem('otp_timer_start_time');

      if (storedRemainingRaw && storedStartTimeRaw) {
        const storedRemaining = parseInt(storedRemainingRaw, 10);
        const storedStartTime = parseInt(storedStartTimeRaw, 10);
        const elapsed = Math.floor((Date.now() - storedStartTime) / 1000);
        const remainingTime = storedRemaining - elapsed;

        if (remainingTime > 0) {
          startTimer(remainingTime);
          return;
        } else {
          localStorage.removeItem('otp_timer_remaining');
          localStorage.removeItem('otp_timer_start_time');
        }
      }

      startTimer(timerDuration);
    });

    // Resend logic
    document.getElementById('resend').addEventListener('click', async (event) => {
      event.preventDefault();
      clearInterval(timerInterval);
      localStorage.removeItem('otp_timer_remaining');
      localStorage.removeItem('otp_timer_start_time');
      startTimer(timerDuration);

      const urlParams = new URLSearchParams(window.location.search);
      const email = urlParams.get('email');

      try {
        const response = await fetch(`/resend?email=${encodeURIComponent(email)}`, { method: 'POST' });
        const data = await response.json();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP sent successfully!',
            timer: 2000,
            showConfirmButton: false
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Failed to resend OTP',
            text: data.message || 'Unknown error'
          });
        }
      } catch (error) {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to contact server'
        });
      }
    });

    // Form submission
    const form = document.getElementById('otpForm');
    const otpInput = document.getElementById('otp');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Reset classes
      otpInput.classList.remove('valid', 'invalid');

      if (!form.checkValidity()) {
        otpInput.classList.add('invalid');
        return;
      }

      try {
        const res = await fetch(window.location.pathname, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ otp: otpInput.value })
        });

        const contentType = res.headers.get('content-type');
        const isJson = contentType && contentType.includes('application/json');
        const data = isJson ? await res.json() : {};

        if (res.ok) {
          otpInput.classList.add('valid');
          Swal.fire({
            icon: 'success',
            title: 'OTP Verified Successfully!',
            timer: 1500,
            showConfirmButton: false
          });

          setTimeout(() => {
            window.location.href = data.redirect || '/';
          }, 1500);
        } else {
          otpInput.classList.add('invalid');
          Swal.fire({
            icon: 'error',
            title: 'Verification Failed',
            text: data.message || 'Incorrect or expired OTP'
          });
        }
      } catch (err) {
        otpInput.classList.add('invalid');
        Swal.fire({
          icon: 'error',
          title: 'Server Error',
          text: 'Something went wrong. Please try again later.'
        });
      }
    });
  </script>
</body>

</html>
